//@version=5
// Pine Script накладывает лимит max_bars_back ≤ 5000, больше не даст
indicator("Session POC Lines (Manual Volume Profile)", overlay=true, max_bars_back=5000)

// === Inputs
startHour        = input.int(9,      "Session Start Hour",    minval=0, maxval=23)
startMinute      = input.int(0,      "Session Start Minute",  minval=0, maxval=59)
endHour          = input.int(12,     "Session End Hour",      minval=0, maxval=23)
endMinute        = input.int(0,      "Session End Minute",    minval=0, maxval=59)
// ограничиваем lookback ≤ 5000
lookbackBars     = input.int(5000,  "Lookback Bars",         minval=1, maxval=5000)
bins             = input.int(100,   "Bins Resolution",       minval=1)

pocColor         = input.color(color.red, "POC Line Color")
pocWidth         = input.int(2,          "POC Line Width",       minval=1, maxval=10)
showLabel        = input.bool(true,       "Show POC Label")
showDelta        = input.bool(false,      "Show Delta Label")
enableDoubleCross = input.bool(true,     "Enable Double Cross Logic")

// === Globals
var line[]  pocLines      = array.new_line()
var float[] pocPrices     = array.new_float()
var bool[]  pocActive     = array.new_bool()
var int[]   pocCrossCount = array.new_int()
var int     sessionStartBar = na

// === Session detection
timezone     = "GMT+0"
startTime    = timestamp(timezone, year, month, dayofmonth, startHour, startMinute)
endTime      = timestamp(timezone, year, month, dayofmonth, endHour, endMinute)
inSession    = (time >= startTime) and (time < endTime)
startSession = inSession and not inSession[1]
endSession   = not inSession and inSession[1]

// === Session start mark
if startSession
    sessionStartBar := bar_index

// === End of session: calculate POC
if endSession
    sessionEndBar = bar_index - 1
    length        = sessionEndBar - sessionStartBar + 1
    if length > 0 and sessionStartBar >= bar_index - lookbackBars
        // расчёт High / Low
        float max_val = na
        float min_val = na
        for i = 0 to length - 1
            idxOff = i + 1
            max_val := na(max_val) ? high[idxOff] : math.max(max_val, high[idxOff])
            min_val := na(min_val) ? low[idxOff]  : math.min(min_val, low[idxOff])
        // формируем бин по объёму
        float step = (max_val - min_val) / bins
        float[] vol_bins = array.new_float(bins, 0.0)
        float deltaSum = 0.0
        for i = 0 to length - 1
            o = i + 1
            v = volume[o]
            p = close[o]
            binIdx = math.floor((p - min_val) / step)
            binIdx := binIdx < 0 ? 0 : binIdx >= bins ? bins - 1 : binIdx
            array.set(vol_bins, binIdx, array.get(vol_bins, binIdx) + v)
            deltaSum += close[o] > open[o] ? v : -v
        // ищем POC
        float max_vol = 0.0
        int   max_i   = 0
        for j = 0 to bins - 1
            vv = array.get(vol_bins, j)
            if vv > max_vol
                max_vol := vv
                max_i   := j
        pocLevel = min_val + step * max_i + step * 0.5
        // рисуем уровень
        ln = line.new(sessionStartBar, pocLevel, sessionEndBar, pocLevel,
                      extend=extend.right, color=pocColor, width=pocWidth)
        array.push(pocLines,      ln)
        array.push(pocPrices,     pocLevel)
        array.push(pocActive,     true)
        array.push(pocCrossCount, 0)
        // подписи
        if showLabel
            label.new(sessionEndBar, pocLevel,
                      "POC: " + str.tostring(pocLevel, format.price),
                      yloc=yloc.price, style=label.style_label_left,
                      color=color.white, textcolor=color.black)
        if showDelta
            midBar    = sessionStartBar + math.floor(length / 2)
            deltaText = str.tostring(deltaSum >= 0 ? "+" + str.tostring(deltaSum, format.volume) : str.tostring(deltaSum, format.volume))
            lblColor  = deltaSum >= 0 ? color.green : color.red
            label.new(midBar, pocLevel, deltaText,
                      yloc=yloc.price, style=label.style_label_down,
                      color=color.new(color.black, 100), textcolor=lblColor)
        // удаляем слишком старые сессии
        sessDurationHours = (endHour - startHour) + (endMinute - startMinute) / 60.0
        maxSessionsCount = math.ceil(lookbackBars / sessDurationHours)
        if array.size(pocLines) > maxSessionsCount
            array.shift(pocLines)
            array.shift(pocPrices)
            array.shift(pocActive)
            array.shift(pocCrossCount)

// === Логика пересечений
if array.size(pocLines) > 0
    for i = 0 to array.size(pocLines) - 1
        if array.get(pocActive, i)
            price_i   = array.get(pocPrices, i)
            prevClose = close[1]
            currClose = close
            crossed = (prevClose < price_i and currClose >= price_i) or (prevClose > price_i and currClose <= price_i)
            if enableDoubleCross
                crossCount = array.get(pocCrossCount, i)
                if crossed and crossCount == 0
                    lnC = array.get(pocLines, i)
                    line.set_style(lnC, line.style_dashed)
                    array.set(pocCrossCount, i, 1)
                else if crossed and crossCount == 1
                    lnC = array.get(pocLines, i)
                    line.set_x2(lnC, bar_index)
                    line.set_extend(lnC, extend.none)
                    array.set(pocCrossCount, i, 2)
                    array.set(pocActive, i, false)
            else
                if crossed
                    lnC = array.get(pocLines, i)
                    line.set_x2(lnC, bar_index)
                    line.set_extend(lnC, extend.none)
                    array.set(pocActive, i, false)